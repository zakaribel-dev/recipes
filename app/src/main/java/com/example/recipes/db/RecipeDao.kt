package com.example.recipes.db

import androidx.room.Dao
import androidx.room.Insert
import androidx.room.OnConflictStrategy
import androidx.room.Query
import com.example.recipes.models.Recipe
import kotlinx.coroutines.flow.Flow

// ğŸ“Œ @Dao (Data Access Object) : Interface qui dÃ©finit les opÃ©rations possibles sur la base de donnÃ©es Room
@Dao
interface RecipeDao {

    // ğŸ“Œ RequÃªte SQL pour rÃ©cupÃ©rer toutes les recettes stockÃ©es dans la base de donnÃ©es
    // - `Flow<List<Recipe>>` â†’ Retourne un **Flow** (permet de suivre les mises Ã  jour en temps rÃ©el)
    @Query("SELECT * FROM recipes")
    fun getAllRecipes(): Flow<List<Recipe>> // âœ… Retourne un **flux de donnÃ©es** mis Ã  jour automatiquement

    // ğŸ“Œ InsÃ¨re une liste de recettes dans la base
    // - `OnConflictStrategy.REPLACE` â†’ Si une recette existe dÃ©jÃ  (mÃªme clÃ© primaire), elle est **remplacÃ©e**
    @Insert(onConflict = OnConflictStrategy.REPLACE)
    suspend fun insertRecipes(recipes: List<Recipe>) // âœ… `suspend` car Room fonctionne en **asynchrone**

    // ğŸ“Œ Supprime toutes les recettes de la base de donnÃ©es
    @Query("DELETE FROM recipes")
    suspend fun clearRecipes() // âœ… `suspend` car cette opÃ©ration peut Ãªtre longue et doit Ãªtre exÃ©cutÃ©e en **background**
}
